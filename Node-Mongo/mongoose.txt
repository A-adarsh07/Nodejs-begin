Now we are going to use mongoose rather than mongodb
Mongoose is an Object Data Modelling(ODM) library for MongoDB and Node.js 
Mongoose is like a translator between your Nodejs code and MongoDB . It makes working with the database smoother and easier

Mongoose as a driver is better than a native official driver -mongodb

Mongoose helps you make sure the data you put into the database is correct. Its like having someone check if you've written your email address correctly before sending a message.
very easy to query from the databases


install mongoose library using npm 
npm i mongoose

import Mongoose and define the MongoDB URL - in the db.js file ,first import the mongoose library and 
define the URL to your MongoDB database.

What are models or schema ??
Models are like a blueprint of our database 
Mongoose allows you to define a schema for your documents. A schema is like a blueprint that defines the structure andd data types of our documents within a collection.

ex. {
    "name" :"ALice",
    "age" : 23,
    "work" : "chef",
    "mobile" :"123-456-4342",
    "salary" :60000
}

    INSTALL BODY-parser
        npm i body-parser
***  WHat is body-parser ??
BodyParser is a middleware library for Express.js . It is used to parse and extract the body of incoming HTTP requests .
when a client sends data to a server , it typically includes that data in the body of an HTTP request.

*** BodyParser.json() automatically parses the json data from the request body and converts into a javascript object , which is then stored in the req.body
express js uses this as middleware 


***After that use 'Models' for different databases , create GET/POST method 
we have a lots of Endpoints in a single server.js file. 
but we shouldn't use this method of creating GET/POST in Server.js file , it'll be difficult later, so we'll use Express-Routing method for END-POINTS 

***Express Router is a way to modularizze and organize your route handling code in an Express js Application. 

***also we'll import Models in Router files 

***CRUD operation in routing Endpoints 
Update operation - PUT method  - 1) which record we want to update ?? 2) what exactly we want to update ??
find the unique identifiers in a document in collection.
first GET the data , then POST it 


Now we'll save our database online 
use MongoDb Atlas free version - create a collection - click connect - paste the url in db.js and connect it  but this is not a good practice 
so now we'll use "DOTENV"
npm install dotenv 
inside dotenv file - provide - Port ,DB_URL, 
also in server.js = require('dotenv').config();

now host your site in Render 

 {******   Middleware - Processs which happened between request and response
lets make a 'logging process' to check how many people hit the server
put the below line in server.js , 
const logRequest = (req,res,next)=> {
    console.log(`[${new Date().tolocalString()}] Request made to :${req.OriginalUrl}`)
}
app.get('/',logRequest, (req,res)=>{
    console.log('WElcome to restaurant' );
})
Make sure your MongoDB Atlas account is connected and open ,
also if you want to work in local db , connect with MongoDB Compass and connect it 
 }*************


// Now if you want to implement it to whole collection or whole body then 

remove logRequest from app.get and use as middleware 
app.use(logRequest);
 so we put logging in every Endpoints using middleware ***********


**********  AUTHENTICATION AND AUTHORIZATION ****
Authentication - first we will authenticate the person or staff , or any user through -credentials like email , or username and password 
Authorization - then we will authorize that person , what he can do and what he/she can see 

SO we will use PASSPORT package for authentication \
npm install passport passport-local

now const passport= require('passport');
const localstrategy = require('passport-local).strategy;

then , edit your personScheme Model for username and passport 
 now  make passport.get() - function for authorization 
and then put the middleware = passport.authenticate('local',{session:false}),(req,res) => {
    res.send('Welcome to the hotel');
}


Now to maintain clean code and server.js  , we'll create a 'auth.js' file and will move all authentication process there 
and then we'll write logic in server.js for authentication for person.
app.use(passport.initialize()); 
const localAuthMiddleware = passport.authenticate("local", { session: false });

app.use("/person", localAuthMiddleware, personRoutes);

Now we'll secure the password -  using - bcrypt - npm i bcrypt
So what we're doing is,   we are modifying the password(or Hashhing the password with the help of bcrypt) just before storing it in "Database".
we'll implement it in PersonSchema using "personScheme.Pre" middleware function and write the hash and salt method and then compare the password

How it works ?? 
whenever the user try to login again and insert the password the (bcrypt.compare) function internally extracts the salts from the 'stored hashed password' 
and uses it to hash the entered password for comparison.
The compare function automatically extracts the salt from the storedHashedPassword and uses it to hash the entered password . it then compares the resulting hash with the stored hash. If they match, it indicates that the entered password is correct . 



