Now we are going to use mongoose rather than mongodb
Mongoose is an Object Data Modelling(ODM) library for MongoDB and Node.js 
Mongoose is like a translator between your Nodejs code and MongoDB . It makes working with the database smoother and easier

Mongoose as a driver is better than a native official driver -mongodb

Mongoose helps you make sure the data you put into the database is correct. Its like having someone check if you've written your email address correctly before sending a message.
very easy to query from the databases


install mongoose library using npm 
npm i mongoose

import Mongoose and define the MongoDB URL - in the db.js file ,first import the mongoose library and 
define the URL to your MongoDB database.

What are models or schema ??
Models are like a blueprint of our database 
Mongoose allows you to define a schema for your documents. A schema is like a blueprint that defines the structure andd data types of our documents within a collection.

ex. {
    "name" :"ALice",
    "age" : 23,
    "work" : "chef",
    "mobile" :"123-456-4342",
    "salary" :60000
}

    INSTALL BODY-parser
        npm i body-parser
***  WHat is body-parser ??
BodyParser is a middleware library for Express.js . It is used to parse and extract the body of incoming HTTP requests .
when a client sends data to a server , it typically includes that data in the body of an HTTP request.

*** BodyParser.json() automatically parses the json data from the request body and converts into a javascript object , which is then stored in the req.body
express js uses this as middleware 


***After that use 'Models' for different databases , create GET/POST method 
we have a lots of Endpoints in a single server.js file. 
but we shouldn't use this method of creating GET/POST in Server.js file , it'll be difficult later, so we'll use Express-Routing method for END-POINTS 

***Express Router is a way to modularizze and organize your route handling code in an Express js Application. 

***also we'll import Models in Router files 

***CRUD operation in routing Endpoints 
Update operation - PUT method  - 1) which record we want to update ?? 2) what exactly we want to update ??
find the unique identifiers in a document in collection.
first GET the data , then POST it 


Now we'll save our database online 
use MongoDb Atlas free version - create a collection - click connect - paste the url in db.js and connect it  but this is not a good practice 
so now we'll use "DOTENV"
npm install dotenv 
inside dotenv file - provide - Port ,DB_URL, 
also in server.js = require('dotenv').config();

now host your site in Render 

 {******   Middleware - Processs which happened between request and response
lets make a 'logging process' to check how many people hit the server
put the below line in server.js , 
const logRequest = (req,res,next)=> {
    console.log(`[${new Date().tolocalString()}] Request made to :${req.OriginalUrl}`)
}
app.get('/',logRequest, (req,res)=>{
    console.log('WElcome to restaurant' );
})
Make sure your MongoDB Atlas account is connected and open ,
also if you want to work in local db , connect with MongoDB Compass and connect it 
 }*************


// Now if you want to implement it to whole collection or whole body then 

remove logRequest from app.get and use as middleware 
app.use(logRequest);
 so we put logging in every Endpoints using middleware ***********


**********  AUTHENTICATION AND AUTHORIZATION ****
Authentication - first we will authenticate the person or staff , or any user through -credentials like email , or username and password 
Authorization - then we will authorize that person , what he can do and what he/she can see 

SO we will use PASSPORT package for authentication \
npm install passport passport-local

now const passport= require('passport');
const localstrategy = require('passport-local).strategy;

then , edit your personScheme Model for username and passport 
 now  make passport.get() - function for authorization 
and then put the middleware = passport.authenticate('local',{session:false}),(req,res) => {
    res.send('Welcome to the hotel');
}


Now to maintain clean code and server.js  , we'll create a 'auth.js' file and will move all authentication process there 
and then we'll write logic in server.js for authentication for person.
app.use(passport.initialize()); 
const localAuthMiddleware = passport.authenticate("local", { session: false });

app.use("/person", localAuthMiddleware, personRoutes);

Now we'll secure the password -  using - bcrypt - npm i bcrypt
So what we're doing is,   we are modifying the password(or Hashhing the password with the help of bcrypt) just before storing it in "Database".
we'll implement it in PersonSchema using "personScheme.Pre" middleware function and write the hash and salt method and then compare the password

How it works ?? 
whenever the user try to login again and insert the password the (bcrypt.compare) function internally extracts the salts from the 'stored hashed password' 
and uses it to hash the entered password for comparison.
The compare function automatically extracts the salt from the storedHashedPassword and uses it to hash the entered password . it then compares the resulting hash with the stored hash. If they match, it indicates that the entered password is correct . 

password compare code in personSchema models
personSchema.methods.comparePassword= async function (candidatePassword){
    try {
        const isMatch= await bcrypt.compare(candidatePassword,this.password);
        return isMatch;
    } catch (error) {
        throw error;
    }
}

// create Person model 
const person = mongoose.model('person',personSchema);


Day -9  Cookies and Tokens 
**** Sessions - Sessions are a way to maintain user state and authenticate users in web applications.
A session is a way or a small file, most likely in JSON format , that stores information about the user, such as a unique ID, time of login expirations, and 
so on. It is generated and stored on the server so that the server can keep track of the user requests. 

The server authenticates the login request , sends a session to the database , and returns a cookie containing the session ID to the user . 

Client  ---> server ----->JSON file----> database 
In response database sends a cookie which contains session ID ..
so the next time when client or user sends a new request ,the server looks up in the database for the ID found in the cookie, if found , it sends the requested pages

*** Cookies - A cookie is a small piece of data that a website stores on a user's computer or device. 
when you revisit the website or navigate to different pages on the same  site , your browser automatically includes the cookie in the HTTP requests it sends to the 
website's server.

Types of cookies : 
1) Session Cookies : these cookies are temporary and are deleted when you close your browser. They are often used for maintaining your login state during a browsing session.
2 ) Persistent Cookies : These cookies are stored on your device for a specified duration, even after you close your browser. They can be used for purposes such as
remembring your preferences or login information across multiple visits to a website. 


Cookies storage : Cookies received from the server are typically stored in the "Cookies" storage of your browser. These cookies can include session cookies,
which are deleted when you close your browser, and persistent cookies, which are stored for a longer period.

Local Storage : Local storage is a mechanism that allows web application to store data locally in the browser. Unlike cookies, data stored in local storage is not 
automatically sent to the server with every request. This storage option is often used for caching data, storing user preferences, or implementing client-side features.

Session Storage : Session storage is similar to local storage but is scoped to particular browsing session . Data stored in session storage is cleared when 
close the browser or tab. It's commonly used for temporary data storage or for maintaining a state within a single browsing session. 

************ Token bases Authentication  ******

A token is an authorization file that cannot be tampered with. It is genrerated by the server using a secret key, sent to and stored by the user in their local storage. Like in the case of cookies , the user sends this token to the server with every new request , so that the server can verify its signature and authorize the requests.

Client -------username && Password -------->>>>> [SERVER]  {validate Login and create new JWT token }
Next time : 
Client --------Request with JWT header ------>>>>>> [SERVER] {validate JWT token}     //this time server will only validate or check the token and give response


********* JWT Authentication ******
JWT(JSON Web Token ) it is a compact and self-contained means of transmitting information between parties as a JSON object.
- JWT consist of three parts : Header, Payload and Signature .
JWTs are commonly used for authentication and authorization in web applications and APIs. They can store user claims such as user ID, roles , permissions 
and custom data , in a  secure and portable format. 
JWTs are stateless, meaning the server does not need to store session information. This makes them suitable for distrubuted architectures and scalable systems. 

header means which cryptographic algorithm we are going to use to secure. Typ(Type) - specifies the type of token, usually set to "JWT" . Alg(algorithm) -indicates
cryptographic algorithm such as SHA256, RSA .
Payload : Contains the claims or statement about the subject and any additional dara.
Signature: Verifies the integrity of the token and ensures that it has not been tampered with during transmission.

User -----> username and password(signup) --->>> Auth server will generate the JWT
user <<<<<<<<<<<------ Authentication server returns JWT 
user again request GET/protected source   ---->>> Bearer <JWT> -------->> server verifies the JWT & gives access to protected data .


JWT Functions
Jwt.sign() - this function is used to generate a new JWT token based on the provided payload and options. 
it takes three parameters :  payload , secretOrPrivateKey 

jwt.verify(): token , secretkey 

install JWT - npm install jsonwebtoken 

create  a JWT auth middleware function, which is responsible for authentication via Tokens.
write a middleware function for jwt verification
write another function to generate jwt token 